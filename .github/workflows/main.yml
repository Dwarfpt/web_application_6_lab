name: Docker CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Build and push database image
        uses: docker/build-push-action@v4
        with:
          context: ./todo-app/database
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/todo-db:latest
      
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./todo-app/backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/todo-backend:latest
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./todo-app/frontend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/todo-frontend:latest
      
      - name: Create Docker network
        run: docker network create todo-network
      
      - name: Run database container
        run: docker run -d --name database --network todo-network -p 5432:5432 ${{ secrets.DOCKER_HUB_USERNAME }}/todo-db:latest
      
      - name: Run backend container
        run: |
          docker run -d --name backend --network todo-network -p 5000:5000 \
          -e EMAIL_USER=${{ secrets.EMAIL_USER }} \
          -e EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }} \
          ${{ secrets.DOCKER_HUB_USERNAME }}/todo-backend:latest
      
      - name: Run frontend container
        run: docker run -d --name frontend --network todo-network -p 80:80 ${{ secrets.DOCKER_HUB_USERNAME }}/todo-frontend:latest
      
      - name: Wait for services to start
        run: |
          echo "Waiting for services to start..."
          sleep 15
          docker ps
      
      - name: Test database connection
        run: |
          echo "Testing database connection through backend API..."
          curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/api/tasks | grep 200
      
      - name: Test backend API - Get all tasks
        run: curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/api/tasks | grep 200
      
      - name: Test backend API - Create new task
        run: |
          TASK_ID=$(curl -s -X POST http://localhost:5000/api/tasks \
            -H "Content-Type: application/json" \
            -d '{"title":"Test Task","description":"Test Description","status":"pending"}' \
            | grep -o '"id":[0-9]*' | cut -d':' -f2)
          echo "Created task ID: $TASK_ID"
          echo "TASK_ID=$TASK_ID" >> $GITHUB_ENV
      
      - name: Test backend API - Get task by ID
        run: |
          curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/api/tasks/${{ env.TASK_ID }} | grep 200
      
      - name: Test backend API - Update task
        run: |
          curl -s -X PUT http://localhost:5000/api/tasks/${{ env.TASK_ID }} \
            -H "Content-Type: application/json" \
            -d '{"title":"Updated Task","description":"Updated Description","status":"completed"}'
      
      - name: Test backend API - Delete task
        run: |
          curl -s -X DELETE http://localhost:5000/api/tasks/${{ env.TASK_ID }}
      
      - name: Test email connection
        run: |
          TEST_RESULT=$(curl -s http://localhost:5000/api/email/test)
          echo "Email connection test: $TEST_RESULT"
    
    # Очистка ресурсов даже при неудачном выполнении тестов
    
      - name: Stop and remove containers
        run: |
          docker stop frontend backend database || true
          docker rm frontend backend database || true
        if: always()
      
      - name: Remove Docker network
        run: docker network rm todo-network || true
        if: always()
